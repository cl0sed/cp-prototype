services:
  db:
    image: pgvector/pgvector:pg17 # Consistent with typical project setup, pg17 is fine if intended.
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      # Expose port 5432 only if you need to connect directly from your host machine for debugging
      - "5433:5432" # Mapping host 5433 -> container 5432 to avoid potential host conflicts
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    ports:
      # Expose port 6379 only if needed for direct host access
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      # Dockerfile location is implicit if named Dockerfile in context dir
    container_name: backend
    env_file:
      - ./backend/.env # Ensure this file contains DB/Redis URLs using service names (db, redis)
    volumes:
      # Mount only the application code for hot-reloading, not the whole directory
      # This prevents overwriting installed dependencies in the container
      - ./backend/app:/app/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    # Command uses --reload for development hot-reloading via Uvicorn
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/app"
    restart: unless-stopped

  worker:
    build:
      context: ./backend # Reuse the same backend image build
    container_name: saq_worker
    env_file:
      - ./backend/.env # Ensure this file contains DB/Redis URLs using service names
    volumes:
      # Mount only the application code for hot-reloading, mirroring the backend service
      - ./backend/app:/app/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    # Use the SAQ CLI to run the worker using our settings module
    command: saq app.worker.settings.settings
    restart: unless-stopped

  frontend:
    # For local development with hot-reloading, we don't use the multi-stage Dockerfile.
    # Instead, we use a base Node image and run the dev server directly.
    image: node:20-alpine # Use a base node image
    container_name: frontend
    working_dir: /app
    volumes:
      # Mount the entire frontend source code
      - ./frontend:/app
      # Use an anonymous volume to prevent host node_modules from overwriting container's
      - /app/node_modules
    ports:
      # Map host 5173 to container 5173 (Vite's default dev port)
      - "5173:5173"
    environment:
      # Environment variables for the frontend
      - PUBLIC_API_BASE_URL=http://localhost:8000
      - PUBLIC_WEBSITE_DOMAIN=http://localhost:5173
      - PUBLIC_APP_NAME=AI Video Platform
    depends_on:
      - backend
    networks:
      - app_network
    # Install dependencies if node_modules doesn't exist, then run dev server
    # The `--host` flag makes Vite listen on all interfaces within the container
    command: sh -c "npm install && npm run dev -- --host"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
